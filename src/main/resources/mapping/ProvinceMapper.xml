<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xqoa.dao.ProvinceDao">
    <!-- Province的resultMap,column是给数据库列起的别名,它对应property类的属性-->
    <resultMap id="result_Province_Map" type="com.xqoa.entity.Province">
        <id column="id" property="id" />
        <result column="province" property="province" />
        <result column="provinceID" property="provinceID" />
    </resultMap>

	   <!-- Assist用于辅助工具类setRequires设置的条件,${req.require}表示列名,#{req.value}表示值它是防SQL注入的 -->
    <sql id="Assist">
        <where>
            <foreach collection="require" item="req" separator=" ">
                ${req.require} 
                <if test="req.value != null"> #{req.value}</if> 
                <if test="req.values != null">
                    <foreach collection="req.values" item="val" separator=","> 
                        #{val} 
                    </foreach> 
                </if> 
                <if test="req.suffix != null"> ${req.suffix}</if> 
            </foreach>
        </where>
    </sql>

	   <!-- updateAssist用于更新数据的使用它拓展自Assist,用于辅助工具类setRequires设置的条件,${req.require}表示列名,#{req.value}表示值它是防SQL注入的 -->
    <sql id="updateAssist">
        <where>
            <foreach collection="assist.require" item="req" separator=" ">
                ${req.require} 
                <if test="req.value != null"> #{req.value}</if> 
                <if test="req.values != null">
                    <foreach collection="req.values" item="val" separator=","> 
                        #{val} 
                    </foreach> 
                </if> 
                <if test="req.suffix != null"> ${req.suffix}</if> 
            </foreach>
        </where>
    </sql>

    <!-- 数据库中表名为:province的列名,as前是数据库的列明,as后是列的别名用于映射成实体类中的属性,需要注意的是别名必须与resultMap中的column别名一致 -->
    <sql id="province_Column">
        province.id as id
        ,province.province as province
        ,province.provinceID as provinceID
    </sql>

    <!--获得类名为:Province对应的数据库表的数据总行数 -->
    <select id="getProvinceRowCount" parameterType="com.xqoa.common.Assist" resultType="java.lang.Long">
        select count(id) from province
        <if test="require!=null"><include refid="Assist" /></if>
    </select>
    <!-- 获得类名为:Province对应数据库中表的数据集合 -->
    <select id="selectProvince" parameterType="com.xqoa.common.Assist"  resultMap="result_Province_Map">
        select  <if test="distinct !=null">${distinct}</if>
        <choose>
            <when test="resultColumn!=null">${resultColumn}</when>
            <otherwise>
        <include refid="province_Column" /> 
            </otherwise>
        </choose>
        from province
        <choose>
            <when test="rowSize ==null">
                <if test="require!=null">
                    <include refid="Assist" />
                </if>
                <if test="order !=null">${order}</if>
            </when>
            <otherwise>
                inner join
                (
                SELECT id as primary_key FROM province
                <if test="require!=null">
                    <include refid="Assist" />
                </if>
                <if test="order !=null">${order}</if>
                <choose>
                    <when test="startRow !=null and rowSize !=null">LIMIT #{startRow},#{rowSize} </when>
                    <when test="rowSize !=null">LIMIT #{rowSize}</when>
                 </choose>
                 ) as tmp
                 on tmp.primary_key=province.id
            </otherwise>
        </choose>
    </select> 

    <!-- 获得一个Province对象,以参数Province对象中不为空的属性作为条件进行查询-->
    <select id="selectProvinceByObj" parameterType="com.xqoa.entity.Province" resultMap="result_Province_Map">
        select 
            <include refid="province_Column" /> 
        from province
        <where>
            <if test="provinceID != null "> and province.provinceID = #{provinceID}</if>
            <if test="province != null "> and province.province = #{province}</if>
            <if test="id != null "> and province.id = #{id}</if>
        </where>
    </select> 

    <!-- 通过Province的id获得对应数据库中表的数据对象-->
    <select id="selectProvinceById" parameterType="java.lang.Integer" resultMap="result_Province_Map">
        select 
            <include refid="province_Column" /> 
        from province
        where province.id = #{id}
    </select> 

    <!-- 将Province插入到对应数据库的表中,包括属性值为null的数据-->

    <insert id="insertProvince" parameterType="com.xqoa.entity.Province">
        insert into province(id,province,provinceID) 
        values(#{id},#{province},#{provinceID})
    </insert>

    <!-- 将Province中属性值不为null的数据,插入到对应数据库的表中-->
    <insert id="insertNonEmptyProvince" parameterType="com.xqoa.entity.Province">
        insert into province
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">id,</if>
            <if test="province != null">province,</if>
            <if test="provinceID != null">provinceID,</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null"> #{id},</if>
            <if test="province != null"> #{province},</if>
            <if test="provinceID != null"> #{provinceID},</if>
        </trim>
    </insert>

    <!-- 将Province批量插入到对应数据库的表中-->
    <insert id="insertProvinceByBatch" parameterType="ArrayList">
        insert into province(id,province,provinceID) values
        <foreach collection="list" item="item" index="index" separator="," >
            (#{item.id},#{item.province},#{item.provinceID})
        </foreach>
    </insert>

    <!-- 通过Province的id将数据库表中对应的数据删除-->
    <delete id="deleteProvinceById" parameterType="java.lang.Integer">
        delete from province
        where id = #{id}
    </delete>

    <!-- 通过辅助工具Assist中的条件将Province对应的数据库表的数据删除-->
    <delete id="deleteProvince" parameterType="com.xqoa.common.Assist">
        delete from province
        <if test="require!=null"><include refid="Assist" /></if>
    </delete>

    <!-- 通过Province的id将Province的数据更新到数据库中对应的表,包括值null的数据-->
    <update id="updateProvinceById" parameterType="com.xqoa.entity.Province">
        update province set
            province=#{province}
            ,provinceID=#{provinceID}
        where id=#{id}
    </update>

    <!-- 通过Province的id将Province中属性值不为null的数据更新到数据库对应的表中-->
    <update id="updateNonEmptyProvinceById" parameterType="com.xqoa.entity.Province">
        update province
        <set>
            <if test="province != null">
                province=#{province},
            </if>
            <if test="provinceID != null">
                provinceID=#{provinceID},
            </if>
        </set>
        where id=#{id}
    </update>

    <!-- 通过辅助工具Assist中的条件将Province中的数据更新到数据库对应的表中,包括值为null的数据-->
    <update id="updateProvince" parameterType="map">
        update province
        <set>
                id=#{enti.id},
                province=#{enti.province},
                provinceID=#{enti.provinceID},
        </set>
        <if test="assist.require!=null"><include refid="updateAssist" /></if>
    </update>

    <!-- 通过辅助工具Assist中的条件将Province中属性值不为null的数据更新到数据库对应的表中-->
    <update id="updateNonEmptyProvince" parameterType="map">
        update province
        <set>
            <if test="enti.id != null">
                id=#{enti.id},
            </if>
            <if test="enti.province != null">
                province=#{enti.province},
            </if>
            <if test="enti.provinceID != null">
                provinceID=#{enti.provinceID},
            </if>
        </set>
        <if test="assist.require!=null"><include refid="updateAssist" /></if>
    </update>

</mapper>